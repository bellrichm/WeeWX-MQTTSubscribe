##############################################################################

[MQTTSubscribeDriver]
    # This section is for the MQTTSubscribe driver.

    console = False
    
    # The driver to use:
    driver = user.MQTTSubscribe
    
    # The MQTT server.
    # Default is: localhost
    host = weather-data.local
    
    # The port to connect to.
    # Default is: 1883
    port = 1883
    
    # Maximum period in seconds allowed between communications with the broker.
    # Default is: 60
    keepalive = 60
    
    # Configuration for the message callback.
    [[message_callback]]
        type = json
    
    # The topics to subscribe to.
    [[topics]]
        [[[weather/loop]]]

##############################################################################

[MQTTSubscribeService]
# This section is for the MQTTSubscribe service.

    console = False

    # The MQTT server.
    # Default is: localhost
    host = weather-data.local

    # Configuration for the message callback.
    [[message_callback]]
        type = json

    # The topics to subscribe to.
    [[topics]]
        [[[weather/loop]]]        

##############################################################################

[Logging]
    version = 1
    disable_existing_loggers = False
      
    [[loggers]]
        # Root logger
        [[[root]]]
          level = {log_level}
          propagate = 1
          handlers = syslog,

        # Just want DEBUG for this module
        # Assuming WeeWx debug flag is 0, root logging level {log_level} is INFO
        # Along with setting the level, need to setup a handler for this module's logger
        # Do not want to propagate because INFO and high would be doubled logged
        [[[user.MQTTSubscribe]]]
          level = DEBUG
          handlers = syslog,
          propagate = 0

    # Definitions of possible logging destinations
    [[handlers]]
    
        # System logger
        [[[syslog]]]
            level = DEBUG
            formatter = standard
            class = logging.handlers.SysLogHandler
            address = {address}
            facility = {facility}
    
        # Log to console
        [[[console]]]
            level = DEBUG
            formatter = verbose
            class = logging.StreamHandler
            # Alternate choice is 'ext://sys.stderr'
            stream = ext://sys.stdout
    
    # How to format log messages
    [[formatters]]
        [[[simple]]]
            format = "%(levelname)s %(message)s"
        [[[standard]]]
            format = "{process_name}[%(process)d] %(levelname)s %(name)s: %(message)s" 
        [[[verbose]]]
            format = "%(asctime)s  {process_name}[%(process)d] %(levelname)s %(name)s: %(message)s"
            # Format to use for dates and times:
            datefmt = %Y-%m-%d %H:%M:%S